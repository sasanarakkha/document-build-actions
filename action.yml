---

name: 'Build ebooks'
description: 'Generic workflow for Sasanarakkha digital books'
inputs:
  verbose_latex:
    description: 'When true print LaTeX output to log'
    required: true
    default: false
  build_pdf:
    required: true
    default: true
  build_epub:
    required: true
    default: true
  build_azw3:
    required: true
    default: true
  build_mobi:
    required: true
    default: true
  validate_epub:
    required: true
    default: true
  optimize_epub:
    required: true
    default: true
  upload_artifacts:
    required: true
    default: true
outputs:
  release_tag:
    value: ${{ steps.tag.release_tag }}
  release_name:
    value: ${{ steps.tag.release_name }}
runs:
  using: "composite"
  steps:
    - name: Sets env vars for release
      run: echo "VERBOSE_LATEX=true" >> $GITHUB_ENV
      shell: bash
      if: always() && FromJSON(inputs.verbose_latex)  # FromJSON to cast string to bool
    - name: Actions checkout
      uses: actions/checkout@v3
      if:  always()
    - name: Check ref
      run: |
        ls --directory .git/
        cat ".git/${GITHUB_REF}"
      shell: bash
      if:  always()
    - name: Build PDF
      run: |
        if [ -n "$VERBOSE_LATEX" ]; then
          make pdf2x
        else
          make pdf2x > /dev/null
        fi
      shell: bash
      if:  always() && FromJSON(inputs.build_pdf)
    - name: Build EPUB
      run: make epub
      shell: bash
      if:  always() && FromJSON(inputs.build_epub)
    - name: Build Mobipocket
      run: make mobi
      shell: bash
      if:  always() && FromJSON(inputs.build_mobi)
    - name: Build AZW3
      run: make azw3
      shell: bash
      if:  always() && FromJSON(inputs.build_azw3)
    - name: Validate EPUB
      run: make validate
      shell: bash
      if:  always() && FromJSON(inputs.validate_epub)
    - name: Optimize EPUB
      run: make optimize
      shell: bash
      if:  always() && FromJSON(inputs.optimize_epub)
    - name: Normalize filenames
      run: |
        for f in build/*; do mv "$f" "$(python3 -m unidecode -c "$f")"; done
        rename --verbose --filename 's/\\//g' build/*
        rename --verbose --filename 's/\s/_/g' build/*
      shell: bash
      if:  always()
    - name: Generate release tag
      id: tag
      run: |
        echo "release_tag=build_$(date +'%d.%m.%Y_%H-%M' --utc)" >> $GITHUB_OUTPUT
        echo "release_name=Build $(date +'%d.%m.%Y %H:%M' --utc) UTC" >> $GITHUB_OUTPUT
      shell: bash
      if:  always() && FromJSON(inputs.upload_artifacts)
    - name: Upload release assets
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.tag.outputs.release_tag }}
        name: ${{ steps.tag.outputs.release_name }}
        body: Automatically built documents
        artifacts: "build/*.pdf,build/*.epub,build/*.mobi,build/*.azw3"
        removeArtifacts: true
        artifactErrorsFailBuild: true
      if:  always() && FromJSON(inputs.upload_artifacts)
